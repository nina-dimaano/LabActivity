#include <iostream>
#include <string>
using namespace std;

struct Node {
    string data;
    int pos;
    Node* next;
    Node(string data) : data(data), next(nullptr) {}
};

class LinkedList {
private:
Node* head, *tail;

public:
    LinkedList() : head(nullptr) {}

    void insertAtBeginning(const string& data) {
        Node* NewNode = new Node(data);
        NewNode->next = head;
        head = NewNode;
}

    void insertAtEnd(const string& data) {
        Node* NewNode = new Node(data);
        if (head == nullptr) {
            head = NewNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next =NewNode;
        }
    }
    
    void insertAfter(const std::string& prevData, const std::string& data) {
        Node* current = head;
        while (current != nullptr && current->data != prevData) {
            current = current->next;
        }
        if (current != nullptr) {
            Node* newNode = new Node(data);
            newNode->next = current->next;
            current->next = newNode;
        } else {
            std::cout << "Previous node not found.\n";
        }
    }
    
    void deleteNode(const std::string& data) {
        if (head == nullptr) return;
        
        if (head->data == data) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* current = head;
        Node* previous = nullptr;
        while (current != nullptr && current->data != data) {
            previous = current;
            current = current->next;
        }

        if (current != nullptr) {
            previous->next = current->next;
            delete current;
        } else {
            std::cout << "Node not found.\n";
        }
    }
    
    int size() const {
        int count = 0;
        Node* current = head;
        while (current) {
            ++count;
            current = current->next;
        }
        return count;
    }
    
    void printList() const {
        Node* current = head;
        for (int i = 0; i < size(); i++) {
            cout << "[" << i + 1 << "]: " << current->data << endl;
            current = current->next;
        }
        cout << "NULL\n";
    }

    ~LinkedList() {
        while (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};
    
    void Menu() {
        LinkedList list;
        int choice;
        string data, PrevData;
        
        do {
            cout << "\nMenu:\n";
            cout << "1. Insert at the beginning\n";
            cout << "2. Insert at the end\n";
            cout << "3. Insert after a position\n";
            cout << "4. Delete node at a position\n";
            cout << "5. Print the list\n";
            cout << "6. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;
            cin.ignore();
            
            switch (choice) {
                case 1:
                cout << "Enter value to insert at the beginning: ";
                getline(cin, data);
                list.insertAtBeginning(data);
                break;
                case 2:
                cout << "Enter value to insert at the end: ";
                getline(cin, data);
                list.insertAtEnd(data);
                break;
                case 3:
                cout << "Enter the existing value where the new value will be inserted: ";
                getline(cin, PrevData);
                cout <<"Enter value to insert: ";
                getline(cin, data);
                list.insertAfter(PrevData, data);
                break;
                case 4:
                cout << "Enter the value to be deleted: ";
                getline(cin, data);
                list.deleteNode(data);
                break;
                case 5:
                list.printList();
                break;
                case 6:
                cout << "Exiting...\n ";
                break;
                default:
                cout << "Invalid choice. Please try again.\n";
            }
        } while (choice != 6);
    }
    
    int main () {
        Menu();
        return 0;
    }
